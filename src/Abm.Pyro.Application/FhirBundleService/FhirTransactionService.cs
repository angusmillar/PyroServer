using System.Net;
using Abm.Pyro.Application.DependencyFactory;
using Abm.Pyro.Application.FhirResponse;
using Abm.Pyro.Application.SearchQuery;
using Abm.Pyro.Application.Validation;
using FluentResults;
using Hl7.Fhir.Model;
using Microsoft.Extensions.Primitives;
using Abm.Pyro.Domain.Enums;
using Abm.Pyro.Domain.Extensions;
using Abm.Pyro.Domain.FhirSupport;
using Abm.Pyro.Domain.Query;
using Abm.Pyro.Domain.SearchQuery;
using Abm.Pyro.Domain.Validation;
using FhirUri = Abm.Pyro.Domain.FhirSupport.FhirUri;

namespace Abm.Pyro.Application.FhirBundleService;

public class FhirTransactionService(
    IFhirTransactionDeleteService fhirTransactionDeleteService,
    IFhirTransactionPostService fhirTransactionPostService,
    IFhirTransactionPutService fhirTransactionPutService,
    IFhirTransactionGetService fhirTransactionGetService,
    IFhirBundleCommonSupport fhirBundleCommonSupport,
    IOperationOutcomeSupport operationOutcomeSupport,
    IFhirResourceTypeSupport fhirResourceTypeSupport,
    IValidator validator,
    ISearchQueryService searchQueryService,
    IResourceStoreSearch resourceStoreSearch,
    IFhirNarrativeSupport fhirNarrativeSupport)
    : IFhirBundleService
{
    private Dictionary<string, StringValues>? RequestHeaders;
    private readonly Dictionary<string, BundleEntryTransactionMetaData> BundleEntryTransactionMetaDataDictionary = new();
    private CancellationTokenSource? CancellationTokenSource;

    public async Task<FhirResourceResponse> Process(FhirBundleRequest request,
        CancellationToken cancellationToken)
    {
        RequestHeaders = request.Headers;

        CancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);

        OperationOutcome? errorBundleRequestOperationOutcome = ValidateAllBundleRequestPropertiesSet(request.Bundle.Entry);
        if (errorBundleRequestOperationOutcome is not null)
        {
            return GetBadRequestFhirResourceResponse(errorBundleRequestOperationOutcome);
        }

        //PreProcessing to resolve resource ids
        OperationOutcome? preProcessDeletesOperationOutcomeError = await fhirTransactionDeleteService.PreProcessDeletes(
            entryList: request.Bundle.Entry,
            requestHeaders: RequestHeaders,
            bundleEntryTransactionMetaDataDictionary: BundleEntryTransactionMetaDataDictionary,
            cancellationToken: CancellationTokenSource.Token);

        if (preProcessDeletesOperationOutcomeError is not null)
        {
            return GetBadRequestFhirResourceResponse(preProcessDeletesOperationOutcomeError);
        }

        if (BundleEntryTransactionMetaDataDictionary.Any(x => x.Value.IsFailure))
        {
            return GetBadRequestFhirResourceResponse(BundleEntryTransactionMetaDataDictionary);
        }

        OperationOutcome? preProcessPostsOperationOutcomeError = await fhirTransactionPostService.PreProcessPosts(
            entryList: request.Bundle.Entry,
            requestHeaders: RequestHeaders,
            bundleEntryTransactionMetaDataDictionary: BundleEntryTransactionMetaDataDictionary,
            cancellationToken: CancellationTokenSource.Token);

        if (preProcessPostsOperationOutcomeError is not null)
        {
            return GetBadRequestFhirResourceResponse(preProcessPostsOperationOutcomeError);
        }

        if (BundleEntryTransactionMetaDataDictionary.Any(x => x.Value.IsFailure))
        {
            return GetBadRequestFhirResourceResponse(BundleEntryTransactionMetaDataDictionary);
        }

        OperationOutcome? preProcessPutsOperationOutcomeError = await fhirTransactionPutService.PreProcessPuts(
            entryList: request.Bundle.Entry,
            requestHeaders: RequestHeaders,
            bundleEntryTransactionMetaDataDictionary: BundleEntryTransactionMetaDataDictionary,
            cancellationToken: CancellationTokenSource.Token);

        if (preProcessPutsOperationOutcomeError is not null)
        {
            return GetBadRequestFhirResourceResponse(preProcessPutsOperationOutcomeError);
        }

        if (BundleEntryTransactionMetaDataDictionary.Any(x => x.Value.IsFailure))
        {
            return GetBadRequestFhirResourceResponse(BundleEntryTransactionMetaDataDictionary);
        }

        //Resource References Updating for new resource Ids generated by Creates (POST) or Updates (PUT), Deletes do not need to go through here.
        OperationOutcome? updateResourceReferencesErrorOperationOutcome = await UpdateResourceReferences(bundle: request.Bundle, cancellationToken: CancellationTokenSource.Token);
        if (updateResourceReferencesErrorOperationOutcome is not null)
        {
            return GetBadRequestFhirResourceResponse(updateResourceReferencesErrorOperationOutcome);
        }

        await fhirTransactionDeleteService.PreProcessDeletes(
            entryList: request.Bundle.Entry,
            requestHeaders: RequestHeaders,
            bundleEntryTransactionMetaDataDictionary: BundleEntryTransactionMetaDataDictionary,
            cancellationToken: CancellationTokenSource.Token);

        if (BundleEntryTransactionMetaDataDictionary.Any(x => x.Value.IsFailure))
        {
            return GetBadRequestFhirResourceResponse(BundleEntryTransactionMetaDataDictionary);
        }

        //Resource Commit Processing, the order matters here
        //Ref: https://hl7.org/fhir/R4/http.html#trules
        // 1. Process any DELETE interactions
        // 2. Process any POST interactions
        // 3. Process any PUT or PATCH interactions
        // 4. Process any GET or HEAD interactions
        // 5. Resolve any conditional references

        // 1. Process any DELETE interactions
        await fhirTransactionDeleteService.PreProcessDeletes(entryList: request.Bundle.Entry,
            requestHeaders: RequestHeaders,
            bundleEntryTransactionMetaDataDictionary: BundleEntryTransactionMetaDataDictionary,
            cancellationToken: CancellationTokenSource.Token);

        if (BundleEntryTransactionMetaDataDictionary.Any(x => x.Value.IsFailure))
        {
            return GetBadRequestFhirResourceResponse(BundleEntryTransactionMetaDataDictionary);
        }

        // 2. Process any POST interactions
        await fhirTransactionPostService.ProcessPosts(
            tenant: request.Tenant,
            entryList: request.Bundle.Entry,
            requestHeaders: RequestHeaders,
            transactionResourceActionOutcomeDictionary: BundleEntryTransactionMetaDataDictionary,
            cancellationToken: CancellationTokenSource.Token);

        if (BundleEntryTransactionMetaDataDictionary.Any(x => x.Value.IsFailure))
        {
            return GetBadRequestFhirResourceResponse(BundleEntryTransactionMetaDataDictionary);
        }

        // 3. Process any PUT or PATCH interactions
        await fhirTransactionPutService.ProcessPuts(
            tenant: request.Tenant,
            entryList: request.Bundle.Entry,
            requestHeaders: RequestHeaders,
            transactionResourceActionOutcomeDictionary: BundleEntryTransactionMetaDataDictionary,
            cancellationToken: CancellationTokenSource.Token);

        if (BundleEntryTransactionMetaDataDictionary.Any(x => x.Value.IsFailure))
        {
            return GetBadRequestFhirResourceResponse(BundleEntryTransactionMetaDataDictionary);
        }

        // 4. Process any GET or HEAD interactions
        OperationOutcome? getFailedOperationOutcome = await fhirTransactionGetService.ProcessGets(
            tenant: request.Tenant,
            entryList: request.Bundle.Entry,
            requestHeaders: RequestHeaders,
            cancellationToken: CancellationTokenSource.Token);

        if (getFailedOperationOutcome is not null)
        {
            return new FhirResourceResponse(
                Resource: getFailedOperationOutcome,
                HttpStatusCode: HttpStatusCode.BadRequest,
                Headers: new Dictionary<string, StringValues>());
        }

        // 5. Resolve any conditional references
        // This is actually performed with in the UpdateResourceReferences method

        
        //Setup to rerun a successful Transaction Response Bundle  
        UpdateBundleToTransactionResponse(bundle: request.Bundle, requestTimeStamp: request.TimeStamp);
        return new FhirResourceResponse(
            Resource: request.Bundle,
            HttpStatusCode: HttpStatusCode.OK,
            Headers: new Dictionary<string, StringValues>()
        );
    }

    private static void UpdateBundleToTransactionResponse(Bundle bundle, DateTimeOffset requestTimeStamp)
    {
        bundle.Type = Bundle.BundleType.TransactionResponse;
        bundle.Timestamp = requestTimeStamp;
        bundle.Id = GuidSupport.NewFhirGuid();
        bundle.Total = null;
        bundle.Link = null;
        bundle.Signature = null;
        foreach (var entryComponent in bundle.Entry)
        {
            entryComponent.Link = null;
            entryComponent.Search = null;
            entryComponent.Request = null;
        }
    }

    private OperationOutcome? ValidateAllBundleRequestPropertiesSet(IEnumerable<Bundle.EntryComponent> entryList)
    {
        var invalidFullUrlList = entryList
            .Where(x => x.Request is null)
            .Select(x => x.FullUrl);

        if (!invalidFullUrlList.Any())
        {
            return null;
        }

        var errorMessageList = new List<string>();
        foreach (var invalidFullUrl in invalidFullUrlList)
        {
            errorMessageList.Add(
                $"The entry with a fullUrl of : {invalidFullUrl} was missing a Request element. All entries within a Transaction Bundle must contain a bundle.entry[x].request element. ");
        }

        return operationOutcomeSupport.GetError(errorMessageList.ToArray());
        
    }

    private FhirResourceResponse GetBadRequestFhirResourceResponse(Dictionary<string, BundleEntryTransactionMetaData> postTransactionResourceActionOutcomeDictionary)
    {
        List<OperationOutcome> failedOperationOutcomeList = new();
        foreach (OperationOutcome? failedOperationOutcome in postTransactionResourceActionOutcomeDictionary
                     .Where(x => x.Value.IsFailure)
                     .Select(s => s.Value.FailureOperationOutcome))
        {
            if (failedOperationOutcome is not null)
            {
                failedOperationOutcomeList.Add(failedOperationOutcome);
            }
        }

        return GetBadRequestFhirResourceResponse(operationOutcomeSupport.MergeOperationOutcomeList(failedOperationOutcomeList));
    }

    private FhirResourceResponse GetBadRequestFhirResourceResponse(OperationOutcome operationOutcome)
    {
        return new FhirResourceResponse(
            Resource: operationOutcome,
            HttpStatusCode: HttpStatusCode.BadRequest,
            Headers: new Dictionary<string, StringValues>(),
            ResourceOutcomeInfo: null,
            CanCommitTransaction: false);
    }

    private async Task<OperationOutcome?> UpdateResourceReferences(Bundle bundle, CancellationToken cancellationToken)
    {
        int entryCounter = 0;
        foreach (Bundle.EntryComponent entry in bundle.Entry)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                return null;
            }

            OperationOutcome? errorOperationOutcome = await UpdateResourceReferences(cancellationToken, entry, entryCounter: entryCounter);
            if (errorOperationOutcome is not null)
            {
                return errorOperationOutcome;
            }
            
            UpdateUrls(cancellationToken, entry);
            UpdateUris(cancellationToken, entry);
            UpdateUuids(cancellationToken, entry);
            UpdateOids(cancellationToken, entry);
            
            entryCounter++;
        }

        return null;
    }

    private async Task<OperationOutcome?> UpdateResourceReferences(CancellationToken cancellationToken,
        Bundle.EntryComponent entry, int entryCounter)
    {
        foreach (ResourceReference resourceReference in entry.Resource.AllReferenceList())
        {
            OperationOutcome? errorOperationOutcome = await UpdateResourceReference(
                entry: entry, 
                entryCounter: entryCounter, 
                resourceReference: resourceReference, 
                cancellationToken: cancellationToken);
                
            if (errorOperationOutcome is not null)
            {
                return errorOperationOutcome;
            }
        }

        return null;
    }
    
    private void UpdateOids(CancellationToken cancellationToken,
        Bundle.EntryComponent entry)
    {
        foreach (Oid oid in entry.Resource.AllOidList())
        {
            string? updatedReference = UpdateReferenceString(
                fromReference: oid.Value, 
                cancellationToken: cancellationToken);
                
            if (!string.IsNullOrWhiteSpace(updatedReference))
            {
                oid.Value = updatedReference;
            }
        }
    }

    private void UpdateUuids(CancellationToken cancellationToken,
        Bundle.EntryComponent entry)
    {
        foreach (Uuid uuid in entry.Resource.AllUuidList())
        {
            string? updatedReference = UpdateReferenceString(
                fromReference: uuid.Value, 
                cancellationToken: cancellationToken);
                
            if (!string.IsNullOrWhiteSpace(updatedReference))
            {
                uuid.Value = updatedReference;
            }
        }
    }

    private void UpdateUris(CancellationToken cancellationToken,
        Bundle.EntryComponent entry)
    {
        foreach (Hl7.Fhir.Model.FhirUri fhirUri in entry.Resource.AllUriList())
        {
            string? updatedReference = UpdateReferenceString(
                fromReference: fhirUri.Value, 
                cancellationToken: cancellationToken);
                
            if (!string.IsNullOrWhiteSpace(updatedReference))
            {
                fhirUri.Value = updatedReference;
            }
        }
    }

    private void UpdateUrls(CancellationToken cancellationToken,
        Bundle.EntryComponent entry)
    {
        foreach (FhirUrl fhirUrl in entry.Resource.AllUrlList())
        {
            string? updatedReference = UpdateReferenceString(
                fromReference: fhirUrl.Value, 
                cancellationToken: cancellationToken);
                
            if (!string.IsNullOrWhiteSpace(updatedReference))
            {
                fhirUrl.Value = updatedReference;
            }
        }
    }

    private async Task<OperationOutcome?> UpdateResourceReference(
        Bundle.EntryComponent entry,
        int entryCounter,
        ResourceReference resourceReference,
        CancellationToken cancellationToken)
    {
        if (cancellationToken.IsCancellationRequested)
        {
            return null;
        }

        Result<FhirUri> resourceReferenceFhirUriResult = fhirBundleCommonSupport.ParseFhirUri(uri: resourceReference.Reference);
        if (resourceReferenceFhirUriResult.IsFailed)
        {
            return operationOutcomeSupport.GetError(new[]
            {
                $"Within the bundle.entry[{entryCounter}].resource of type the {entry.Resource.TypeName}, with the fullURL: {entry.FullUrl}, " +
                $"a resource reference of: '{resourceReference.Reference}' was unable to parse. " + resourceReferenceFhirUriResult.Errors.First().Message
            });
        }
                
        //Resolves and Updates references such as 'Patient?identifier=[SomeSystem]|[SomeId]
        OperationOutcome? errorOperationOutcome = await ResolveConditionalReferences(entry, resourceReferenceFhirUriResult.Value, resourceReference, entryCounter: entryCounter);
        if (errorOperationOutcome is not null)
        {
            return errorOperationOutcome;
        }

        //Updates all references with the ids generated or found based on the transaction PUTS and POSTS  
        string? updatedReference = UpdateBasedOnPutsAndPosts(resourceReferenceFhirUriResult.Value);
        if (!string.IsNullOrWhiteSpace(updatedReference))
        {
            resourceReference.Reference = updatedReference;
        }
        
        //Updates all references located in the resource's narrative
        if (entry.Resource is DomainResource domainResource)
        {
            fhirNarrativeSupport.UpdateAllReferences(domainResource.Text, BundleEntryTransactionMetaDataDictionary);    
        }

        return null;
    }
    
    
    
    private string? UpdateReferenceString(
        string fromReference,
        CancellationToken cancellationToken)
    {
        if (cancellationToken.IsCancellationRequested)
        {
            return null;
        }

        Result<FhirUri> fhirUrlResult = fhirBundleCommonSupport.ParseFhirUri(uri: fromReference);
        if (fhirUrlResult.IsFailed)
        {
            return null;
        }
        
        return UpdateBasedOnPutsAndPosts(fhirUrlResult.Value);
        
    }
    
    private async Task<OperationOutcome?> ResolveConditionalReferences(Bundle.EntryComponent entry,
        FhirUri resourceReferenceFhirUri,
        ResourceReference resourceReference,
        int entryCounter)
    {
        if (!IsConditionalReference(resourceReferenceFhirUri))
        {
            return null;
        }

        ArgumentNullException.ThrowIfNull(RequestHeaders);

        FhirResourceTypeId fhirResourceType = fhirResourceTypeSupport.GetRequiredFhirResourceType(resourceReferenceFhirUri.ResourceName);
        SearchQueryServiceOutcome searchQueryServiceOutcome = await searchQueryService.Process(fhirResourceType, resourceReferenceFhirUri.Query);
        ValidatorResult searchQueryValidatorResult = validator.Validate(new SearchQueryServiceOutcomeAndHeaders(
            searchQueryServiceOutcome: searchQueryServiceOutcome,
            headers: RequestHeaders));
        if (!searchQueryValidatorResult.IsValid)
        {
            return searchQueryValidatorResult.GetOperationOutcome();
        }

        ResourceStoreSearchOutcome resourceStoreSearchOutcome = await resourceStoreSearch.GetSearch(searchQueryServiceOutcome);

        //if there are no matches, or multiple matches, the transaction fails, and an error is returned to the user
        if (!IsSignalMatch(resourceStoreSearchOutcome))
        {
            return operationOutcomeSupport.GetError(new[]
            {
                $"Within the bundle.entry[{entryCounter}].resource, of type the {entry.Resource.TypeName}, with the fullURL: {entry.FullUrl}, " +
                $"a conditional resource reference search query of : '{resourceReference.Reference}' encountered a (412 PreconditionFailed) response " +
                $", indicating the criteria were not selective enough."
            });
        }

        //if there is a single match, the server replaces the search URI with a reference to the matching resource
        resourceReference.Reference = fhirBundleCommonSupport.SetResourceReference(
            resourceReferenceFhirUri: resourceReferenceFhirUri,
            resourceName: resourceReferenceFhirUri.ResourceName,
            resourceId: resourceStoreSearchOutcome.ResourceStoreList.First().ResourceId,
            versionId: resourceStoreSearchOutcome.ResourceStoreList.First().VersionId);

        return null;
    }

    private static bool IsSignalMatch(ResourceStoreSearchOutcome resourceStoreSearchOutcome)
    {
        return resourceStoreSearchOutcome.SearchTotal == 1;
    }

    private static bool IsConditionalReference(FhirUri resourceReferenceFhirUri)
    {
        return string.IsNullOrWhiteSpace(resourceReferenceFhirUri.ResourceId) && !string.IsNullOrWhiteSpace(resourceReferenceFhirUri.Query);
    }

    
    
    private string? UpdateBasedOnPutsAndPosts(FhirUri fhirUrlFhirUri)
    {
        BundleEntryTransactionMetaData? transactionResourceActionOutcome = null;
        if (fhirUrlFhirUri.IsUrn)
        {
            transactionResourceActionOutcome = BundleEntryTransactionMetaDataDictionary.Values.FirstOrDefault(x =>
                x.ForFullUrl.IsUrn &&
                x.ForFullUrl.UrnType.Equals(fhirUrlFhirUri.UrnType) &&
                x.ForFullUrl.Urn.Equals(fhirUrlFhirUri.Urn));    
        }
        
        if (transactionResourceActionOutcome is null && !string.IsNullOrWhiteSpace(fhirUrlFhirUri.ResourceName) && !string.IsNullOrWhiteSpace(fhirUrlFhirUri.ResourceId))
        {
            transactionResourceActionOutcome = BundleEntryTransactionMetaDataDictionary.Values.FirstOrDefault(x =>
            x.ForFullUrl.ResourceName.Equals(fhirUrlFhirUri.ResourceName) &&
            x.ForFullUrl.ResourceId.Equals(fhirUrlFhirUri.ResourceId));
        }

        if (transactionResourceActionOutcome is null)
        {
            return null;
        }

        
        if (!IsResourceReferenceToUpdate(transactionResourceActionOutcome.ForFullUrl, fhirUrlFhirUri))
        {
            return null;
        }

        ArgumentNullException.ThrowIfNull(transactionResourceActionOutcome.ResourceUpdateInfo);
        
       return fhirBundleCommonSupport.SetResourceReference(
            resourceReferenceFhirUri: fhirUrlFhirUri,
            resourceName: transactionResourceActionOutcome.ResourceUpdateInfo.ResourceName,
            resourceId: transactionResourceActionOutcome.ResourceUpdateInfo.NewResourceId,
            versionId: transactionResourceActionOutcome.ResourceUpdateInfo.NewVersionId);
    }
    
    
    private static bool IsResourceReferenceToUpdate(FhirUri possibleMatchFhirUri,
        FhirUri resourceReferenceFhirUri)
    {
        //Where a resource reference is of the type: 'Patient/10'
        if (!resourceReferenceFhirUri.IsAbsoluteUri &&
            resourceReferenceFhirUri.ResourceName.Equals(possibleMatchFhirUri.ResourceName) &&
            resourceReferenceFhirUri.ResourceId.Equals(possibleMatchFhirUri.ResourceId))
        {
            return true;
        }

        //Where a resource reference is of the type: '[base]/Patient/10' and the [base] is equal to its fullUri's [base]
        if (resourceReferenceFhirUri.IsAbsoluteUri &&
            resourceReferenceFhirUri.ResourceName.Equals(possibleMatchFhirUri.ResourceName) &&
            resourceReferenceFhirUri.ResourceId.Equals(possibleMatchFhirUri.ResourceId))
        {
            return true;
        }

        //Where a resource reference is of the type: 'urn:uuid:c72aa430-2ddc-456e-7a09-dea8264671d8' or 'urn:oid:1.3.6.1.4.1.343' and it matched its fullUri's [base]
        if (possibleMatchFhirUri.IsUrn &&
            possibleMatchFhirUri.Urn.Equals(resourceReferenceFhirUri.ResourceId))
        {
            return true;
        }

        return false;
    }
    
}